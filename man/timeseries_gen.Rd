% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeseries_sim.R
\name{timeseries_gen}
\alias{timeseries_gen}
\title{Simulate time series and save to csv files.}
\usage{
timeseries_gen(
  sim.name,
  path,
  nsims,
  years,
  doy.samples,
  abund.type,
  activity.type,
  sample.type,
  sim.parms
)
}
\arguments{
\item{sim.name}{Name of this simulation instance.}

\item{path}{Filepath to save results into. Likely to remain constant across different calls of \code{timeseries_gen()}}

\item{nsims}{Number of simulations to run}

\item{years}{Years  for which to simulate data}

\item{doy.samples}{Days of year to simulate observation events.}

\item{abund.type}{What type of variation in abundance to model. Currently supported:
exponential growth (\code{"exp"}), log normal variation (\code{"rlnorm"}).}

\item{activity.type}{What type activity curve to model? Currently supports the
Zonneveld model (\code{"zon"}),
a simple gaussian activity curve (\code{"gauss"}), and a bivoltine activity curve based
on two Gaussian curves (\code{"bivolt"}).}

\item{sample.type}{Name of sampling distribution. Currently supported: Poisson (\code{"pois"}),
negative binomial (\code{"nb"}), and zero-inflated negative binomial (\code{"zinb"}). "nb" and "zinb"
will require additional parameters.}

\item{sim.parms}{list with named components matching each of the required additional
parameters for the selected abundance type, activity type, and sample type.
See details for full list of parameter names. Each sim.parm component can either take
a single value (every simulation will use that value), or vector of the minimum and
maximum desired valeus (each simulation will use a different value drawn from a uniform
with those bounds).}
}
\value{
Nothing is returned, but results are saved to csv files.
}
\description{
Helper function for timeseries_sim, which also saves into a consistent structure.
}
\examples{
# path.res = "G:/Dropbox/academia/research projects/butterfly-gam-sims/4_res"
# parms = list(growth.rate = c(1,-1),
#              init.size = 500,
#              act.mean = 130,
#              act.sd = 15)
# timeseries_gen(sim.name = "testsim2",
#                path = path.res,
#                nsims = 5,
#                years = 1990:2000,
#                doy.samples = seq(100,160, by = 10),
#                abund.type = "exp",
#                activity.type = "gauss",
#                sample.type = "pois",
#                sim.parms = parms)
#
# out = timeseries_load(sim.name = "testsim2",
#                       path = path.res)
# head(out$timeseries)
# head(out$parms)
}
